package equation_one;

public class Queues {
    private int[] numbers;
    private int front;
    private int rear;
    private int nItems;
    private int maxSize;

    public Queues(int maxSize) {
        this.maxSize = maxSize;
        numbers = new int[maxSize];
        front = 0;
        rear = -1;
        nItems = 0;
    }

    public boolean isEmpty() {
        return nItems == 0;
    }

    public boolean isFull() {
        return nItems == maxSize;
    }

    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty. Cannot  peek.");
        }
        return numbers[front];
    }

    public void enqueue(int value) {
        if (isFull()) {
            throw new IllegalStateException("Queue is full. Cannot  enqueue element " + value);
        }
        if (rear == maxSize - 1) {
            rear = -1; // Wrap around
        }
        numbers[++rear] = value;
        nItems++;
    }

    public int dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty. Cannot  dequeue.");
        }
        int frontValue = numbers[front++];
        if (front == maxSize) {
            front = 0; // Wrap around
        }
        nItems--;
        return frontValue;
    }

    public static void main(String[] args) {
        Queues numQueue = new Queues(5);

        System.out.println("Front element: " + numQueue.peek());
        System.out.println("Size of the queue: " + numQueue.nItems);
        while (!numQueue.isEmpty()) {
            System.out.println(numQueue.dequeue());
        }

 }
}
